{"version":3,"sources":["meteor://ğŸ’»app/imports/api/courses.jsx","meteor://ğŸ’»app/server/main.js"],"names":["module","export","Courses","Meteor","link","v","Mongo","check","Collection","isServer","publish","coursesPublication","find","$or","private","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","courseId","course","remove","setChecked","Boolean","update","$set","checked","setToPrivate","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n \nexport const Courses = new Mongo.Collection('courses');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n   // Only publish courses that are public or belong to the current user\n  Meteor.publish('courses', function coursesPublication() {\n    return Courses.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n \nMeteor.methods({\n  'courses.insert'(text) {\n    check(text, String);\n \n    // Make sure the user is logged in before inserting a course\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Courses.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n  'courses.remove'(courseId) {\n    check(courseId, String);\n\n    const course = Courses.findOne(courseId);\n    if (course.private && course.owner !== this.userId) {\n      // If the course is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Courses.remove(courseId);\n  },\n  'courses.setChecked'(courseId, setChecked) {\n    check(courseId, String);\n    check(setChecked, Boolean);\n\n    const course = Courses.findOne(courseId);\n    if (course.private && course.owner !== this.userId) {\n      // If the course is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n    \n    Courses.update(courseId, { $set: { checked: setChecked } });\n  },\n\n  'courses.setPrivate'(courseId, setToPrivate) {\n    check(courseId, String);\n    check(setToPrivate, Boolean);\n \n    const course = Courses.findOne(courseId);\n \n    // Make sure only the course owner can make a course private\n    if (course.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Courses.update(courseId, { $set: { private: setToPrivate } });\n  },\n\n\n\n\n});","import { Meteor } from 'meteor/meteor';\nimport '../imports/api/courses.jsx';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}